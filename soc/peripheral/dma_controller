module dma_controller #(
    parameter ADDR_WIDTH = 8,
    parameter DATA_WIDTH = 32
) (
    input  logic clk,
    input  logic rst,
    input  logic [DATA_WIDTH-1:0] data_in, // Input data frame
    output logic [DATA_WIDTH-1:0] data_out, // Output data
    DATA_BUS.Master dma_mst // Data bus interface
);

    // Internal signals
    logic fifo_full, fifo_empty;
    logic [DATA_WIDTH-1:0] fifo_data_out;
    logic dma_read, dma_write;
    logic [DATA_WIDTH-1:0] read_data;
    logic [ADDR_WIDTH-1:0] src_addr, dest_addr, transfer_len;
    logic ready;

    // Instantiate FIFO module
    fifo #(
        .DATA_WIDTH(DATA_WIDTH),
        .DEPTH(16)
    ) fifo_inst (
        .clk(clk),
        .rst(rst),
        .data_in(data_in),
        .full(fifo_full),
        .empty(fifo_empty),
        .data_out(fifo_data_out)
    );

    // Parse the data frame from FIFO
    always_ff @(posedge clk or posedge rst) begin
        if (rst) begin
            src_addr <= 0;
            dest_addr <= 0;
            transfer_len <= 0;
            dma_read <= 0;
            dma_write <= 0;
        end else if (!fifo_empty) begin
            src_addr <= fifo_data_out[31:24]; // Bits 31 to 24 for source address
            dest_addr <= fifo_data_out[23:16]; // Bits 23 to 16 for destination address
            transfer_len <= fifo_data_out[15:8]; // Bits 15 to 8 for transfer length
            dma_read <= 1;
            dma_write <= 0;
        end else if (ready && dma_read) begin
            dma_read <= 0;
            dma_write <= 1;
        end else if (ready && dma_write) begin
            dma_write <= 0;
        end
    end

    // Instantiate Master Interface
    master_interface #(
        .base_addr(CFG_BADR_LED),
        .addr_mask(CFG_MADR_LED)
    ) master_inst (
        .clk(clk),
        .rst(rst),
        .dma_addr(dma_read ? src_addr : dest_addr),
        .dma_read(dma_read),
        .write_data(read_data),
        .reg_data_o(read_data),
        .ready(ready),
        .dslv(dma_mst)
    );

    always_ff @(posedge clk or posedge rst) begin
        if (rst) begin
            data_out <= 0;
        end else if (dma_read && ready) begin
            data_out <= read_data;
        end else if (dma_write && ready) begin
            data_out <= read_data;
        end
    end

endmodule